import 'package:test/test.dart';
import 'package:daily_prophet_flutter/features/news/models/article.dart';

/// Unit tests are for verifying the behavior of a single function, method, or class. 
/// The test package, which you have to add in pubspec.yaml, provides the core framework for writing unit tests
/// The flutter_test package provides additional utilities for testing widgets.

/// A test file is basically a file that ends in underscore test dot dart, and in it you have a main function. 
/// Inside the main function, you have a test title, which describes what you want to test, and you give code for whatever you want to do. 
/// Basically, you have a lot of expect statements.

/// If you want to run a test, you simply do flutter test in the terminal.
/// You can also run the test on vscode, with the flutter extension.

/// This test simply checks the json parsing library.
/// in the Article model, I have a function that parses article ids - I get a json string, which is an array of article ids, and I return it as a list of ints after parsing it. 
/// In the unit test, I have a test json string, and I feed it through the parseArticleIds function, and what I’m expecting here is that the first element will be 17238241, as an integer. 

/// So this code would catch errors like oh you haven’t updated the de-serializer code to the latest json, for example, or if you pass in an unexpected value.



void main() {
  test("parse article ids", () {
    const jsonString =
        "[17238241,17239602,17238135,17236788,17237510,17238089,17230960,17238070,17238911,17238953,17236022,17239753,17237792,17235171,17237567,17236187,17236473,17236242,17237442,17239413,17238766,17235832,17234537,17237468,17234448,17235749,17237183,17237876,17234498,17234416,17237295,17236405,17236294,17235810,17239740,17239036,17237526,17233371,17239259,17230273,17235056,17239061,17237026,17237373,17236039,17235063,17223926,17231593,17233824,17236110,17229397,17230583,17233979,17235160,17234615,17226225,17233208,17238146,17234627,17230262,17235375,17237153,17231847,17233811,17230720,17238639,17230469,17230916,17233448,17221885,17231355,17230863,17227564,17238015,17231349,17233538,17222827,17230510,17231806,17230785,17224772,17232884,17221379,17230090,17237490,17234526,17229264,17230513,17217815,17222861,17216634,17231120,17232169,17219379,17228517,17230631,17235354,17231704,17226900,17234488,17235027,17230143,17232447,17235949,17217827,17232200,17220861,17232357,17224329,17229085,17234350,17236351,17218831,17226243,17234483,17234124,17231178,17220002,17230120,17229491,17223749,17230029,17233835,17234217,17228369,17229940,17217081,17231493,17229971,17228480,17216178,17230578,17235609,17221221,17217526,17236300,17228891,17218080,17235692,17233106,17220356,17234452,17220006,17232083,17220507,17219101,17228384,17223116,17232519,17217203,17233908,17214827,17216937,17220252,17221483,17234090,17234723,17218573,17231773,17221211,17217069,17218190,17220630,17221498,17217210,17214953,17220387,17229435,17219185,17220325,17235614,17231337,17221794,17218833,17220016,17216878,17217673,17217324,17214711,17225725,17220396,17215474,17214986,17217444,17229793,17231091,17220382,17234800,17216078,17218160,17216452,17220660,17215391,17236760,17217155,17216972,17239039,17222252,17214857,17214841,17214750,17216536,17215409,17234933,17218605,17234371,17221239,17216441,17232945,17226485,17226781,17225327,17222177,17215679,17216319,17226169,17224758,17215603,17216039,17229973,17215829,17234230,17217653,17218285,17230539,17219059,17215089,17219092,17218348,17218473,17231576,17217498,17214867,17230934,17217044,17219111,17215332,17216193,17230413,17230239,17218657,17216293,17230047,17232799,17221486,17222460,17232302,17218576,17223855,17214676,17219217,17217637,17215476,17225889,17219249,17230394,17215407,17216035,17220226,17223383,17216564,17223579,17217881,17228234,17220369,17215966,17217733,17222439,17215931,17221696,17233726,17216114,17225665,17233923,17216249,17227307,17215950,17215514,17222576,17224805,17230766,17219556,17228458,17221435,17223935,17217688,17219162,17215836,17215299,17225599,17224474,17217625,17223375,17216271,17220590,17215605,17221670,17224920,17220761,17217584,17224948,17215372,17216239,17219734,17224382,17216260,17217472,17216851,17216188,17217799,17216649,17220544,17216192,17215738,17215074,17219885,17215881,17220163,17220803,17217407,17217359,17219992,17228099,17215381,17215051,17234826,17223628,17227286,17218250,17225756,17227299,17220662,17221527,17228704,17218302,17232456,17231289,17229848,17228097,17230995,17225957,17226063,17229200,17217193,17239580,17233367,17229374]";

    expect(parseArticleIds(jsonString).first, 17238241);
  });
}
